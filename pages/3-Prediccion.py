import streamlit as st
import joblib
import pandas as pd
import os
import sys
from pathlib import Path

# Agregar el directorio Pages al path para imports
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))

from model_trainer import MedicalDiagnosisModel

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Diagn√≥stico M√©dico IA",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado para mejorar la apariencia
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .step-header {
        font-size: 1.5rem;
        color: #2e8b57;
        margin-bottom: 1rem;
    }
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .emergency-box {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Inicializar el modelo
@st.cache_resource
def load_medical_model():
    """Carga el modelo m√©dico mejorado"""
    model = MedicalDiagnosisModel()
    
    # Definir la ruta del modelo (buscar en Pages/ primero, luego en directorio actual)
    model_path = None
    possible_paths = [
        current_dir / 'enhanced_rf_model.pkl',  # En Pages/
        Path.cwd() / 'Pages' / 'enhanced_rf_model.pkl',  # Desde ra√≠z
        Path.cwd() / 'enhanced_rf_model.pkl'  # En directorio actual
    ]
    
    for path in possible_paths:
        if path.exists():
            model_path = str(path)
            break
    
    # Intentar cargar modelo existente, si no existe, entrenar uno nuevo
    if model_path and model.load_model(model_path):
        st.success(f"Modelo cargado desde: {model_path}")
    else:
        st.warning("Modelo no encontrado. Entrenando nuevo modelo...")
        df = model.create_enhanced_dataset()
        model.train_model(df)
        # Guardar en el directorio Pages
        save_path = str(current_dir / 'enhanced_rf_model.pkl')
        model.save_model(save_path)
        st.success("Modelo entrenado y guardado exitosamente!")
    
    return model

# Cargar modelo
medical_model = load_medical_model()

# Mapeo de s√≠ntomas para la interfaz
symptom_questions = {
    'respira': "¬øEl paciente respira normalmente?",
    'dolor_pecho': "¬øPresenta dolor en el pecho?",
    'tos': "¬øTiene tos persistente?",
    'fiebre': "¬øPresenta fiebre?",
    'fatiga': "¬øExperimenta fatiga extrema?",
    'mareos': "¬øTiene mareos o v√©rtigo?",
    'nauseas': "¬øPresenta n√°useas o v√≥mitos?",
    'sudoracion': "¬øTiene sudoraci√≥n excesiva?",
    'palpitaciones': "¬øSiente palpitaciones card√≠acas?",
    'dificultad_respirar': "¬øTiene dificultad para respirar?"
}

# Informaci√≥n adicional sobre s√≠ntomas
symptom_info = {
    'respira': "Respiraci√≥n normal sin obstrucciones",
    'dolor_pecho': "Dolor, presi√≥n o molestia en el √°rea del pecho",
    'tos': "Tos que persiste por m√°s de unos d√≠as",
    'fiebre': "Temperatura corporal elevada (>38¬∞C)",
    'fatiga': "Cansancio extremo que no mejora con descanso",
    'mareos': "Sensaci√≥n de inestabilidad o p√©rdida de equilibrio",
    'nauseas': "Sensaci√≥n de malestar estomacal o ganas de vomitar",
    'sudoracion': "Sudoraci√≥n anormal sin causa aparente",
    'palpitaciones': "Sensaci√≥n de latidos card√≠acos irregulares o acelerados",
    'dificultad_respirar': "Sensaci√≥n de falta de aire o respiraci√≥n laboriosa"
}

# Estado de sesi√≥n para flujo secuencial
if 'step' not in st.session_state:
    st.session_state.step = 0
    st.session_state.respuestas = {}
    st.session_state.current_symptoms = []

# T√≠tulo principal
st.markdown('<h1 class="main-header">üè• Sistema de Diagn√≥stico M√©dico con IA</h1>', unsafe_allow_html=True)

# Sidebar con informaci√≥n
with st.sidebar:
    
    st.markdown("---")
    st.header("üìã Progreso")
    total_symptoms = len(symptom_questions)
    completed = len(st.session_state.respuestas)
    progress = completed / total_symptoms if st.session_state.step != 'resultado' else 1.0
    st.progress(progress)
    st.write(f"S√≠ntomas evaluados: {completed}/{total_symptoms}")

# Funci√≥n para mostrar informaci√≥n del s√≠ntoma
def show_symptom_info(symptom_key):
    with st.expander(f"‚ÑπÔ∏è M√°s informaci√≥n sobre este s√≠ntoma"):
        st.write(symptom_info[symptom_key])

# L√≥gica principal de la aplicaci√≥n
if st.session_state.step == 0:
    st.markdown('<h2 class="step-header">üö® Evaluaci√≥n Inicial Cr√≠tica</h2>', unsafe_allow_html=True)
    
    col1, col2 = st.columns([2, 1])
    with col1:
        st.markdown("**Esta es la pregunta m√°s importante. Una respuesta negativa requiere atenci√≥n inmediata.**")
        respira = st.radio(
            symptom_questions['respira'],
            ("S√≠", "No"),
            help="Eval√∫e si el paciente puede respirar sin asistencia"
        )
    
    with col2:
        show_symptom_info('respira')
    
    if st.button("üîÑ Continuar Evaluaci√≥n", type="primary"):
        st.session_state.respuestas['respira'] = 1 if respira == "S√≠" else 0
        if st.session_state.respuestas['respira'] == 0:
            st.session_state.step = 'emergencia'
        else:
            st.session_state.step = 1
        st.rerun()

elif st.session_state.step == 1:
    st.markdown('<h2 class="step-header">‚ù§Ô∏è Evaluaci√≥n de S√≠ntomas Card√≠acos</h2>', unsafe_allow_html=True)
    
    cardiac_symptoms = ['dolor_pecho', 'fatiga', 'palpitaciones', 'sudoracion', 'mareos']
    
    for symptom in cardiac_symptoms:
        col1, col2 = st.columns([2, 1])
        with col1:
            response = st.radio(
                symptom_questions[symptom],
                ("No", "S√≠"),
                key=f"cardiac_{symptom}",
                help=f"Eval√∫e: {symptom_info[symptom]}"
            )
            st.session_state.respuestas[symptom] = 1 if response == "S√≠" else 0
        
        with col2:
            show_symptom_info(symptom)
    
    if st.button("üîÑ Continuar a S√≠ntomas Respiratorios", type="primary"):
        st.session_state.step = 2
        st.rerun()

elif st.session_state.step == 2:
    st.markdown('<h2 class="step-header">ü´Å Evaluaci√≥n de S√≠ntomas Respiratorios</h2>', unsafe_allow_html=True)
    
    respiratory_symptoms = ['tos', 'fiebre', 'dificultad_respirar', 'nauseas']
    
    for symptom in respiratory_symptoms:
        col1, col2 = st.columns([2, 1])
        with col1:
            response = st.radio(
                symptom_questions[symptom],
                ("No", "S√≠"),
                key=f"respiratory_{symptom}",
                help=f"Eval√∫e: {symptom_info[symptom]}"
            )
            st.session_state.respuestas[symptom] = 1 if response == "S√≠" else 0
        
        with col2:
            show_symptom_info(symptom)
    
    if st.button("üîç Realizar Diagn√≥stico", type="primary"):
        st.session_state.step = 'resultado'
        st.rerun()

# Manejo de casos especiales
if st.session_state.step == 'emergencia':
    st.markdown("""
    <div class="emergency-box">
        <h2>üö® EMERGENCIA M√âDICA DETECTADA</h2>
        <h3>ACCIONES INMEDIATAS REQUERIDAS:</h3>
        <ul>
            <li><strong>1. Llamar inmediatamente a servicios de emergencia (911)</strong></li>
            <li><strong>2. Verificar v√≠as respiratorias</strong></li>
            <li><strong>3. Iniciar RCP si es necesario</strong></li>
            <li><strong>4. Mantener al paciente en posici√≥n de recuperaci√≥n</strong></li>
            <li><strong>5. No dejar solo al paciente</strong></li>
        </ul>
        <p><strong>‚ö†Ô∏è Esta es una situaci√≥n que pone en peligro la vida. Act√∫e inmediatamente.</strong></p>
    </div>
    """, unsafe_allow_html=True)
    
    if st.button("üîÑ Reiniciar Evaluaci√≥n"):
        st.session_state.step = 0
        st.session_state.respuestas = {}
        st.rerun()

elif st.session_state.step == 'resultado':
    st.markdown('<h2 class="step-header">üìä Resultado del Diagn√≥stico</h2>', unsafe_allow_html=True)
    
    try:
        # Realizar predicci√≥n con el modelo mejorado
        result = medical_model.predict(st.session_state.respuestas)
        
        # Mostrar resultado principal
        diagnosis = result['diagnosis']
        probability = result['probability']
        
        if result['diagnosis_code'] == 3:  # Emergencia
            st.markdown(f"""
            <div class="emergency-box">
                <h3>üö® {diagnosis}</h3>
                <p><strong>Probabilidad: {probability:.1%}</strong></p>
                <p>Se requiere atenci√≥n m√©dica inmediata.</p>
            </div>
            """, unsafe_allow_html=True)
        elif result['diagnosis_code'] in [1, 2]:  # Problemas card√≠acos o respiratorios
            st.markdown(f"""
            <div class="warning-box">
                <h3>‚ö†Ô∏è {diagnosis}</h3>
                <p><strong>Probabilidad: {probability:.1%}</strong></p>
                <p>Se recomienda consultar con un m√©dico pronto.</p>
            </div>
            """, unsafe_allow_html=True)
        else:  # Normal
            st.markdown(f"""
            <div class="success-box">
                <h3>‚úÖ {diagnosis}</h3>
                <p><strong>Probabilidad: {probability:.1%}</strong></p>
                <p>Los s√≠ntomas no indican problemas graves inmediatos.</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Mostrar todas las probabilidades
        st.subheader("üìà An√°lisis Detallado de Probabilidades")
        prob_df = pd.DataFrame([
            {"Diagn√≥stico": diag, "Probabilidad": f"{prob:.1%}"}
            for diag, prob in result['all_probabilities'].items()
        ]).sort_values("Probabilidad", ascending=False)
        
        st.dataframe(prob_df, use_container_width=True)
        
        # Mostrar s√≠ntomas reportados
        st.subheader("üìã Resumen de S√≠ntomas Reportados")
        symptoms_present = [
            symptom_questions[key] for key, value in st.session_state.respuestas.items() 
            if value == 1
        ]
        
        if symptoms_present:
            for symptom in symptoms_present:
                st.write(f"‚Ä¢ {symptom}")
        else:
            st.write("No se reportaron s√≠ntomas significativos.")
        
        # Disclaimer importante
        st.markdown("""
        ---
        ### ‚ö†Ô∏è IMPORTANTE - Disclaimer M√©dico
        
        **Este sistema es √∫nicamente una herramienta de apoyo y NO reemplaza el criterio m√©dico profesional.**
        
        - üî¨ **Basado en IA:** Utiliza algoritmos de aprendizaje autom√°tico
        - üìä **Datos sint√©ticos:** Entrenado con datos simulados para demostraci√≥n
        - üë®‚Äç‚öïÔ∏è **Consulte a un m√©dico:** Siempre busque atenci√≥n m√©dica profesional
        - üö® **En emergencias:** Llame inmediatamente a servicios de emergencia
        
        **No tome decisiones m√©dicas bas√°ndose √∫nicamente en este diagn√≥stico.**
        """)
        
    except Exception as e:
        st.error(f"Error al realizar el diagn√≥stico: {str(e)}")
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üîÑ Nueva Evaluaci√≥n", type="primary"):
            st.session_state.step = 0
            st.session_state.respuestas = {}
            st.rerun()
    
    with col2:
        if st.button("üì• Descargar Reporte"):
            # Aqu√≠ podr√≠as implementar la descarga de un reporte en PDF
            st.info("Funcionalidad de descarga en desarrollo")